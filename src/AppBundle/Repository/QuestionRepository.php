<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Question;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getSpecificQuestions($options)
    {
        $questions = [];

        foreach ($options['books'] as $book) {
            $results = $this->createQueryBuilder('q')
                ->select('q')
                ->where('q.book = :book')
                ->andWhere('q.status = :status')
                ->setParameter('book', $book)
                ->setParameter('status', 'Added')
                ->addSelect('RAND() as HIDDEN rand')
                ->orderBy('rand')
                ->setMaxResults($options['amount'])
                ->distinct()
                ->getQuery()
                ->getResult();
            array_push($questions, $results);
        }
        return $questions;
    }

    public function getRandomQuestions($limit)
    {
        $questions = [];

        $results = $this->createQueryBuilder('q')
            ->select('q')
            ->where('q.status = :status')
            ->addSelect('RAND() as HIDDEN rand')
            ->orderBy('rand')
            ->setParameter('status', 'Added')
            ->setMaxResults($limit)
            ->distinct()
            ->getQuery()
            ->getResult();

        array_push($questions, $results);
        return $questions;
    }

    public function getCategoryQuestions($categoryId)
    {
      return [0 => $questions = $this->createQueryBuilder('q')
          ->select('q')
          ->where('q.book = :categoryId')
          ->andWhere('q.status = :status')
          ->setParameter('categoryId', $categoryId)
          ->setParameter('status', 'Added')
          ->addSelect('RAND() as HIDDEN rand')
          ->orderBy('rand')
          ->setMaxResults(20)
          ->getQuery()
          ->getResult()];
    }

    const MAX_RESULTS = 20;

    public function paginate($dql, $page = 1, $limit = NotificationRepository::MAX_RESULTS)
    {
        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit);

        return $paginator;
    }

    /**
     * @param int $currentPage
     * @param int $userId
     * @param int $limit
     * @return Paginator
     */
    public function getPaginatedQuestions($currentPage = 1, $userId, $limit = NotificationRepository::MAX_RESULTS)
    {
        $query = $this->createQueryBuilder('n')
            ->select('n')
            ->where('n.created_by = :userId')
            ->setParameter('userId', $userId)
            ->orderBy('n.createdAt', 'desc')
            ->getQuery();

        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }
}
